#1.Your task is to create slightly different animals, which should have the same properties and methods, 
# but should implement the talk() method in different ways. 
# For example. should a cat (when talking) say "Moew", a dog "Woff", a fish "Blub" and a Cow "Muuu". 
# They should all share the following (private) properties: name (string), age (number), food (list of strings), 
# and have the functions get_name, set_name, get_age, set_age, get_food, add_food, remove_food. Finally,
#  all the animals must have the talk function, but that function must, as I said, 
# be implemented in each animal, as the animals have different sounds.
#When you have made the classes, create instances of the classes and put in a list
# - loop through the list - and let all the animals talk! :)
import string


class Animals:
    def __init__(self, name:string, age: int, food:list()):
        self.__name="mariam"
        self.__age=19
        self.__food=["rice", "spags", "posho"]

    def talk(self):
        return True

    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name =name  

    def get_age(self):
        return self.__age

    def set_age(self, age):
        self.__age =age  

    def get_food(self):
        return self.__food

    def set_age(self, food):
        self.__food =food  

    def add_food():
        return ('f{self.__food}.append()')

    def remove_food():
        return ("{self.__food}.pop()")

#a cat (when talking) say "Moew", a dog "Woff", a fish "Blub" and a Cow "Muuu". 
class cat(Animals):
    def __init__(self, name, age, food):
        super().__init__(name, age, food)
        
    def talk(self):
        return ("moew")


class dog(Animals):
    def __init__(self, name,age,food):
        super().__init__(name, age,food)
        
    def talk(self):
        return ("woff")

class fish(Animals):
    def __init__(self, name,age, food):
        super().__init__(name,age,food)
        
    def talk(self):
        return ("blub")


def print_Animals(Animals):
    print("{} when talking says {}".format(Animals.get_name(), Animals.talk()))
#instances

qw= dog("pesh", 14, ["rice", "spags", "posho"])    
qt= cat("rita",10,["chicken","fish"])


print_Animals(qw)
print_Animals(qt)
        



print("=========================================================================")
#2.The snail climbs up 7 feet each day and slips back 2 feet each night. 
# How many days will it take the snail to get out of a well with the given depth?.
#Using python, write a function to solve this problem. Sample Input: 31 Sample Output: 6



#3.Write a function that takes a list of numbers and returns the largest number in the list.
def box(list1):
    list= list1[0]

    for i in list1:
        if i > list:
            list=i
    
    return list


list1 = [10, 8920, 574, 445, 99]
print("Largestnumber is:", box(list1))

    

print("=========================================================================")
#4.Write a program that accepts a sentence and calculate the number of upper case letters 
# and lower case letters. 
# Suppose the following input is supplied to the program: Hello world! 
# Then, the output should be: UPPER CASE 1 LOWER CASE 9
import re 

string = input("enter an string: ")

uppercase= re.findall(r"[A-Z]", string)
lowercase= re.findall(r"[a-z]", string)

print("UPPER CASE", len(uppercase), "LOWER CASE", len(lowercase))

print("=========================================================================")
#5.Using Object Oriented Programming, write a program that implements a dice game. 
# The game should have two players, and each player should have a name and a score. 
# The game should have a method called play that takes two players as arguments and simulates the game. 
# The game should be played as follows:
#Each player rolls a die.
#The player with the highest roll wins the round.
#The winner gets one point added to their score.
#The game ends when one player has 5 points.
#The player with the most points at the end of the game wins.
#The program should print out the winner's name and score.
#If a player rolls a 6, they get an extra roll. If they roll a 6 again, they get another extra roll. 
# If they roll a 6 a third time, they get an extra roll, but their turn ends.

print("=========================================================================")
#6.Write a Python program that lists out all the default as well as custom properties of the class.
class president:
    def __init__(self, name, age):
        self.name = name
        self.age = age
president1 = president("Mariam", 36)


print(dir(president1))
print("=========================================================================")
#7.Write a Program in Python to implement a Stack Data Structure using Class 
# and Objects, with push, pop, and traversal methods.

class Stack:
    def __init__(self):
        self.stack = list()

    # check if the stack is empty
    def isEmpty(self):
        return len(self.stack) == 0

    def push(self, data):
        # push element on the stack
        self.stack.append(data)

    def pop(self):
        # pop element from the stack
        if self.isEmpty():
            return ("Stack is empty. Stack Underflow :(")
        return self.stack.pop()

    def show(self):
        return self.stack

r= Stack()
r.isEmpty()
r.push(701148749)
r.push("ground")
r.push("games")
print(r.show())
print(r.pop())
print(r.show())





print("=========================================================================")
#8.Using list comprehension, write a program that takes a list of numbers and returns a 
# list of the squares of the numbers.



print("=========================================================================")
#9.Using only functions andlists, Implement a queue data structure. 
# The queue should have the following methods: enqueue, dequeue, and size. 
# The queue should be "first-in-first-out" (FIFO).

Queue=list()

def enqueue(data):
    return Queue.insert(0, data)
    

def dequeue():
    if len(Queue) !=0 :
        Queue.pop()
    else:
        print('array empty')

def size():
    if len(Queue) !=0 :
        return len(Queue)
    else:
        print('array empty')

def display():
    return (Queue)

enqueue(4)
enqueue('mariam')
enqueue(45)
print(display())
print(size())

dequeue()
print(display())

print(size())
